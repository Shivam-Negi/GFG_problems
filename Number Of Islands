class DisjointSet {
	vector <int> size, parent;
public:
	DisjointSet(int n){
		size.resize(n+1, 1);
		parent.resize(n+1);
		for(int i = 0; i < n; ++i){
			parent[i] = i;
		}
	}

	int find_U_par(int node){
		if(node == parent[node])
			return node;

		return parent[node] = find_U_par(parent[node]);
	}

	void unionBySize(int u, int v){
		int ulp_u = find_U_par(u);    // ultimate parent finding
		int ulp_v = find_U_par(v);

		if(ulp_u == ulp_v)     // already connected
			return;

		if(size[ulp_u] < size[ulp_v]){
			parent[ulp_u] = ulp_v;
			size[ulp_v] += size[ulp_u];
		}
		else{
			parent[ulp_v] = ulp_u;
			size[ulp_u] += size[ulp_v];
		}
	}
};

class Solution {
    bool isValid(int i, int j, int n, int m){
        return i >= 0 && j >= 0 && i < n && j < m;
    }
  public:
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        int nodes = n * m;            // no. of cells
        DisjointSet ds(nodes);
        vector<vector<int>> vis(n, vector<int>(m, 0));
        int ct = 0;
        vector <int> res;
        for(auto it : operators){
            int row = it[0];
            int col = it[1];
            if(vis[row][col]){          // for repeated query
                res.push_back(ct);
                continue;
            }
            vis[row][col] = 1;
            ++ct;
            int dr[] = {-1, 0, 1, 0};
            int dc[] = {0, 1, 0, -1};
            for(int i = 0; i < 4; ++i){
                int adjr = row + dr[i];
                int adjc = col + dc[i];
                if(isValid(adjr, adjc, n, m)){
                    if(vis[adjr][adjc]){
                        int nodeNo = row * m + col;
                        int adjnodeNo = adjr * m + adjc;
                        if(ds.find_U_par(nodeNo) != ds.find_U_par(adjnodeNo)){
                            ct--;
                            ds.unionBySize(nodeNo, adjnodeNo);
                        }
                    }
                }
            }
            res.push_back(ct);
        }
        return res;
    }
};
