DFS....

class Solution
{
    
    void dfs(int node, vector <int>& vis, stack <int>& s, 
                vector<int> adj[]) {
                    
            vis[node] = 1;
            for(auto child : adj[node]){
                if(!vis[child])
                    dfs(child, vis, s, adj);
            }
            s.push(node);
        }
    
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    vector <int> vis(V, 0);
	    stack <int> s;
	    for(int i = 0; i < V; ++i){
	        if(!vis[i])
	            dfs(i, vis, s, adj);
	    }
	    
	    vector <int> ans;
	    while(!s.empty()){
	        ans.push_back(s.top());
	        s.pop();
	    }
	    return ans;
	}
};


BFS ( Kahn's Algo ) ....

class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    vector <int> inDegree(V, 0);
	    for(int i = 0; i < V; ++i){
	        for(auto child : adj[i]){
	            inDegree[child]++;
	        }
	    }
	    queue <int> q;
	    for(int i = 0; i < V; ++i){
	        if(inDegree[i] == 0)
	            q.push(i);
	    }
	    
	    vector <int> topo;
	    while(!q.empty()){
	        int node = q.front();
	        q.pop();
	        topo.push_back(node);
	        for(auto child : adj[node]){
	            inDegree[child]--;
	            if(inDegree[child] == 0)
	                q.push(child);
	        }
	    }
	    return topo;
	}
};
