DFS....

class Solution {
    
    bool chkDfs(int node, vector <int>& vis, vector <int>& path, vector<int> adj[]){
        vis[node] = 1;
        path[node] = 1;
        
        for(auto child : adj[node]){
            if(!vis[child]){
                if(chkDfs(child, vis, path, adj) == true)
                    return true;
            }
            else if(path[child])
                return true;
        }
        
        path[node] = 0;
        return false;
    }
    
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        vector <int> vis(V, 0);
        vector <int> path(V, 0);
        
        for(int i = 0; i < V; ++i){
            if(!vis[i]){
                if(chkDfs(i, vis, path, adj) == true)
                    return true;
            }
        }
        return false;
    }
};


BFS.....(topo sort)

class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        vector <int> inDegree(V, 0);
	    for(int i = 0; i < V; ++i){
	        for(auto child : adj[i]){
	            inDegree[child]++;
	        }
	    }
	    queue <int> q;
	    for(int i = 0; i < V; ++i){
	        if(inDegree[i] == 0)
	            q.push(i);
	    }
	    
	    //vector <int> topo;
	    int ct = 0;
	    
	    while(!q.empty()){
	        int node = q.front();
	        q.pop();
	       // topo.push_back(node);
	        ct++;
	        for(auto child : adj[node]){
	            inDegree[child]--;
	            if(inDegree[child] == 0)
	                q.push(child);
	        }
	    }
	    return (ct == V  ?  0 : 1);
    }
};
