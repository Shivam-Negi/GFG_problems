class Solution {
    int n, m;
    
    void dfs(int i, int j, vector <pair<int, int>>& v, vector<vector<int>>& grid,
                vector <vector<int>>& vis, int baseRow, int baseCol) {
                    
            if(i < 0 || j < 0) return;
            if(i >= n || j >= m) return;
            if(grid[i][j] != 1) return;
            if(vis[i][j] == 1) return;
            
            vis[i][j] = 1;
            
            v.push_back({i - baseRow, j - baseCol});
        
            dfs(i-1, j, v, grid, vis, baseRow, baseCol);
            dfs(i+1, j, v, grid, vis, baseRow, baseCol);
            dfs(i, j-1, v, grid, vis, baseRow, baseCol);
            dfs(i, j+1, v, grid, vis, baseRow, baseCol);
                
        }
  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        n = grid.size();
        m = grid[0].size();
        vector <vector<int>> vis(n, vector<int>(m, 0));
        set<vector<pair<int, int>>> s;
        for(int i = 0; i < n; ++i){
            for(int j = 0; j < m; ++j){
                if(!vis[i][j] && grid[i][j] == 1){
                    vector <pair<int, int>> v;
                    dfs(i, j, v, grid, vis, i, j);
                    s.insert(v);
                }
            }
        }
        return s.size();
    }
};
