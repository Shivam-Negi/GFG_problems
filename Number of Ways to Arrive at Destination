class Solution {
    const int M = 1e9 + 7;
  public:
    int countPaths(int n, vector<vector<int>>& roads) {
        
        vector <pair<int, int>> g[n];
        for(auto it : roads){
            g[it[0]].push_back({it[1], it[2]});
            g[it[1]].push_back({it[0], it[2]});
        }
        
        vector <int> ways(n, 0);
        vector <int> time(n, 1e9);
        ways[0] = 1;
        time[0] = 0;
        
        set <pair<int, int>> s;            //  < node, time >
        s.insert({0, 0});
        
        while(s.size() > 0){
            auto it = *s.begin();
            
            int node = it.first;
            int tm = it.second;
            
            s.erase(s.begin());
            
            for(auto child : g[node]){
                int child_node = child.first;
                int child_time = child.second;
                
                if(tm + child_time < time[child_node]){
                    time[child_node] = tm + child_time;
                    s.insert({child_node, time[child_node]});
                    ways[child_node] = ways[node];
                }
                else if(tm + child_time == time[child_node]){
                    ways[child_node] += ways[node];
                }
            }
        }
        return ways[n-1] % M;
    }
};
