class Solution{
    
    vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    vector <int> inDegree(V, 0);
	    for(int i = 0; i < V; ++i){
	        for(auto child : adj[i]){
	            inDegree[child]++;
	        }
	    }
	    queue <int> q;
	    for(int i = 0; i < V; ++i){
	        if(inDegree[i] == 0)
	            q.push(i);
	    }
	    
	    vector <int> topo;
	    while(!q.empty()){
	        int node = q.front();
	        q.pop();
	        topo.push_back(node);
	        for(auto child : adj[node]){
	            inDegree[child]--;
	            if(inDegree[child] == 0)
	                q.push(child);
	        }
	    }
	    return topo;
	}
    
    public:
    string findOrder(string dict[], int N, int K) {
        
        // creating a dir. graph
        vector <int> adj[K];
        // change alphabets into int
        for(int i = 0; i < N-1; ++i){
            string s1 = dict[i];
            string s2 = dict[i+1];
            int len = min(s1.size(), s2.size());
            for(int ptr = 0; ptr < len; ++ptr){
                if(s1[ptr] != s2[ptr]){
                    adj[s1[ptr] - 'a'].push_back(s2[ptr] - 'a');
                    break;
                }
            }
        }
        
        vector <int> topo = topoSort(K, adj);
        // converting back int to char 
        string ans = "";
        for(auto it : topo){
            ans += char(it + 'a');
        }
        return ans;
    }
};
